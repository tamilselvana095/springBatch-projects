package com.config;

import javax.xml.stream.events.EndDocument;

import org.springframework.batch.core.Job;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.repository.JobRepository;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.item.data.RepositoryItemWriter;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.LineMapper;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.PathResource;
import org.springframework.core.task.SimpleAsyncTaskExecutor;
import org.springframework.core.task.TaskExecutor;
import org.springframework.transaction.PlatformTransactionManager;

import com.entity.Customer;
import com.repository.CustomerRepository;

import lombok.AllArgsConstructor;

@Configuration
@EnableBatchProcessing

public class CsvBatchConfig {
	
	@Autowired
	private CustomerRepository customerRepository;
	
	@Autowired
	private StepBuilderFactory stepBuilderFactory;
	
	@Autowired
	private JobBuilderFactory jobBuilderFactory;
	
	
	
	@Bean
	public FlatFileItemReader<Customer> customerReader(){
		
		FlatFileItemReader<Customer>itemReader=new FlatFileItemReader<>();
				itemReader.setResource(new PathResource("src/main/resources/customers.csv"));
				itemReader.setName("csv-reader");
				itemReader.setLinesToSkip(1);
				itemReader.setLineMapper(lineMapper());
		
		
		
		return itemReader;
	}

	private LineMapper<Customer> lineMapper() {
		DefaultLineMapper<Customer> lineMapper=new DefaultLineMapper<>();
		
		DelimitedLineTokenizer lineTokenizer=new DelimitedLineTokenizer();
		lineTokenizer.setDelimiter(",");
		 lineTokenizer.setStrict(false);
		lineTokenizer.setNames("id","firstName","lastName","email","gender","contactNo","country","dob");
		
		BeanWrapperFieldSetMapper<Customer> fieldSetMapper=new BeanWrapperFieldSetMapper<>();
		fieldSetMapper.setTargetType(Customer.class);
		
		lineMapper.setLineTokenizer(lineTokenizer);
		lineMapper.setFieldSetMapper(fieldSetMapper);
		
		
		return lineMapper;
	}
	
	@Bean
	public CustomerProcessor customerProcessor() {
		return new CustomerProcessor();
	}
	
	@Bean
	public RepositoryItemWriter<Customer> customerWritter(){
		
		RepositoryItemWriter<Customer> repositoryWritter=new RepositoryItemWriter<>();
		repositoryWritter.setRepository(customerRepository);
		repositoryWritter.setMethodName("save");
		
		
		System.out.println(repositoryWritter);
		
		return repositoryWritter;
	}

	@Bean
	public Step step1() {
	
		return stepBuilderFactory.get("step1")
								 .<Customer,Customer>chunk(10)
								 .reader(customerReader())
								 .processor(customerProcessor())
								 .writer(customerWritter())
//								 .taskExecutor(taskExecutor())
								 .faultTolerant()
								 .skipLimit(100)
								 .skip(Exception.class)
								 //.noSkip(IllegalArgumentException.class)
								 .build();
	
	
	}
	
	
	@Bean
	public Job runJob() {
		return jobBuilderFactory.get("customer-job")
						 .flow(step1())
						 .end()
						 .build();
	}
	
	/*
	 * @Bean public TaskExecutor taskExecutor() { SimpleAsyncTaskExecutor
	 * asyncExecutor=new SimpleAsyncTaskExecutor();
	 * asyncExecutor.setConcurrencyLimit(10); return taskExecutor(); }
	 */
	
}
